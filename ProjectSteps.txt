1) express <projectName> --hbs 

2) cd to <projectName> 

3) code . 

4) npm install   #to install all dependencies 

5) create .bowerrc file for bootstrap and JQuery 
	add {
    		"directory": "public/bower_components"
	    } 

6) install bootstrap & jqeuery 
	bower install bootstrap jquery

7) add     
<link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.css">
to layoyt.hbs to use bootstrap 

8) Start your happy coding in index.hbs   ^_^ 


9) install mongoose for mongoDB => npm install --save mongoose 

10) in app.js, const mongoose = require('mongoose')

11) connect to mongoDB before the line of routing 
mongoose.connect('mongodb://localhost/ECommerce',{seNewUrlParser:true},(error)=>{
  if(error){
    console.log(error)
  }
  else{
    console.log('connected to Database')
  }
})

12) create models folder for DB schema and products.js inside it

13) require mongoose inside products.js

14) create ProductSchema 
const ProductSchema = mongoose.Schema({
	Name: {
		type:String,
		required: true
	      }
})

15) export your schema 
module.exports = mongoos.model('Product',ProductSchema)

16) create init folder & ProductInit.js

17) require schema product 
const Product = require('../model/product.js');
then fill the db manually 

18)require the data to index.js
const Product = require('../models/Product') 


User Sign up & Auth

19) create schema for user inside models folder 

20) create user folder inside views and add signup.hbs page  

21) inside route folder and users.js, add your routing for any CRUD method 

22) download express validator => npm install --save express-validator 

23) require express validator in app.js **the new express version works differently; it returns an object that has two functions 
=> require express validator in users.js instead => const {check,validationResult} = require('express-validator) 

24) the check function is an array that has all errors inside. it's placed after '/signup' rout in .post 
=> rouer.post('signup', [],(req,res,next)=>{}) 

25) the results of the check function are saved in the validationResult function
=> so we save it into errors variable and then check if we have any errors

,(req,res,next)=>{
  const errors = validationResult(req);
  if(!errors.isEmpty()){
    console.log(errors);
    return;
  }
  res.send('OK!')
}

26) to use password encryption and hashing, we use bcrypt 
=> npm install --save bcrypt

27) require bcrypt in user.js schema in model folder 

28) we create a function to a hash passwords 

userSchema.methods.hashPassword = function(password){
    return bcrypt.hashSync(password,bcrypt.genSaltSync(5),null);
}

29) inside the callback function in users.js, we use an instance of the user DB and save our post req values 
const user = new User ({
    email: req.body.email,
    password: new User().hashPassword(req.body.password)
  })
  user.save((error,doc)=>{
    if(error){
      console.log(error);
    }
      console.log('doc:'+doc);
      res.redirect('/');
    
  })











